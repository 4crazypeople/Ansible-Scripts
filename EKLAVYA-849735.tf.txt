//provider

provider "aws"
{ 
	region = "${var.aws_region}"
}

//launching 

resource "aws_launch_configuration" "launching" 
{
	name_prefix = "launching"
	image_id    = "${lookup(var.AMIS, var.aws_region)}"
	instance_type= "t2.micro"
	key_name = "${aws_key_pair.pairkey.key_name}"
	security_groups = ["${aws_security_group.myinstance.id}"]
	vpc_zone_identifier  = ["${aws_subnet.main-public-1.id}", "${aws_subnet.main-public-2.id}"]
}

resource "aws_autoscaling_group" "autoscaling" 
{
	name= "autoscaling"
	launch_configuration = "${aws_launch_configuration.launching.name}"
	health_check_type = "ELB"
	load_balancers = ["${aws_elb.elb.name}"]
  	tag 
	{
      		key = "Name"
     		value = "ec2 instance"
 	}
}

//variable

variable "aws_region" 
{
	default = "eu-west-1"
}
variable "path_to_privatekey" 
{
	default = "key"
}
variable "path_to_publickey" 
{
	default = "key.pub"
}
variable "AMIS" 
{
	type = "map"
	default =
	{
		us-east-1 = "ami-13be557e"
    		us-west-2 = "ami-06b94666"
   		eu-west-1 = "ami-844e0bf7"
  	}
}

//keypair

resource "aws_key_pair" "pairkey" 
{
	key_name = "pairkey"
	public_key = "${file("${var.path_to_publickey}")}"
	lifecycle {
			ignore_changes = ["public_key"]
  		  }
}

//subnet 


resource "aws_subnet" "main-public-1" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.1.0/24"
    map_public_ip_on_launch = "true"
    availability_zone = "eu-west-1a"

    tags {
        Name = "main-public-1"
    }
}
resource "aws_subnet" "main-public-2" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.2.0/24"
    map_public_ip_on_launch = "true"
    availability_zone = "eu-west-1b"

    tags {
        Name = "main-public-2"
    }
}


//internet_gateway..

resource "aws_internet_gateway" "main-gw" {
    vpc_id = "${aws_vpc.main.id}"

    tags {
        Name = "main"
    }
}


//elb

resource "aws_elb" "elb" 
{
	name = "elb"
 	listener {
    			instance_port = 80
    			instance_protocol = "http"
    			lb_port = 80
    			lb_protocol = "http"
  		 }
  	health_check {
    			healthy_threshold = 2
    			unhealthy_threshold = 2
    			timeout = 3
    			target = "HTTP:80/"
    			interval = 30
  		     }
	connection_draining = true
	connection_draining_timeout = 400
  	tags {
    		Name = "elb"
  	     }
}

//route_table

resource "aws_route_table" "main-public" {
    vpc_id = "${aws_vpc.main.id}"
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.main-gw.id}"
    }

    tags {
        Name = "main-public-1"
    }
}



//security group

resource "aws_security_group" "elbsecurity" {
  vpc_id = "${aws_vpc.main.id}"
  name = "elb"
  egress {
      from_port = 0
      to_port = 0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
      from_port = 80
      to_port = 80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  } 
  tags {
    Name = "elb"
  }
}


//output

output "ELB" 
{
	value = "${aws_elb.elb.dns_name}"
}
