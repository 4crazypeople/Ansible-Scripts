Create a template for running a simple two-tier architecture on Amazon Web services. The premise is that you have stateless app servers running behind an ELB serving traffic.

#VARIABLE

variable "AWS_REGION" {
  default = "eu-east-1"
}

variable "PRIVATEKEY" {
  default = "pkey"
}

variable "PUBLICKEY" {
  default = "pkey.pub"
}

variable "AMIS" {
  type = "map"
  default = {
    us-west-2 = "ami-06b94666"
    eu-west-1 = "ami-844e0bf7"
    us-east-1 = "ami-13be557e"
  }
}

#PROVIDER
provider "aws" { 
    region = "${var.AWS_REGION}"
}

#RESOURCE
resource "aws_key_pair" "pkeypair" {
  key_name = "pkeypair"
  public_key = "${file("${var.PUBLICKEY}")}"
}


#AUTOSCALING
resource "aws_launch_configuration" "aws-config" {

  name          = "AWSconfig"
  image_id             = "${lookup(var.AMIS, var.AWS_REGION)}"
  instance_type        = "t2.micro"
   security_groups      = ["${aws_security_group.myinstance.id}"]
  key_name             = "${aws_key_pair.pkeypair.key_name}"
}

resource "aws_autoscaling_group" "autoscaling" {

  name                 = "autoscaling"
  vpc_zone_identifier  = ["${aws_subnet.main-public-1.id}", "${aws_subnet.main-public-2.id}"]
  launch_configuration = "${aws_launch_configuration.aws-config.name}"
  security_groups = ["${aws_security_group.elb-securitygroup.id}"]
  min_size             = 2
  max_size             = 2
  health_check_grace_period = 300
  health_check_type = "ELB"
  load_balancers = ["${aws_elb.a-elb.name}"]
  force_delete = true
  tag {
      key = "Name"
      value = "ec2 instance"
      propagate_at_launch = true
  }
}

#ELB
resource "aws_elb" "a-elb" {
  name = "a-elb"
 
listener {
    instance_port = 8080	
    instance_protocol = "http"
    lb_port = 8080
    lb_protocol = "http"
  }

  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    target = "HTTP:8080/"
    interval = 30
  }

  cross_zone_load_balancing = true
  connection_draining = true
  connection_draining_timeout = 400
  tags {
    Name = "a-elb"
  }

}

#OUTPUT
output "ELB" {
	value = "${aws_elb.a-elb.dns_name}"

}

#SECURITYGROUP
resource "aws_security_group" "myinstance" {
  vpc_id = "${aws_vpc.main.id}"
  name = "myinstance"
  egress {
      from_port = 0
      to_port = 0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
      from_port = 22
      to_port = 22
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  } 

  ingress 
      from_port = 80
      to_port = 80
      protocol = "tcp"
      security_groups = ["${aws_security_group.elb-securitygroup.id}"]
  }
  tags {
    Name = "myinstance"
  }
}

resource "aws_security_group" "elb-securitygroup" {
  vpc_id = "${aws_vpc.main.id}"

  name = "elb"
  egress {
      from_port = 0
      to_port = 0
      protocol = "-1"

      cidr_blocks = ["0.0.0.0/0"]

  }
  ingress {
      from_port = 80
      to_port = 80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  } 
  tags {
    Name = "elb"
  }
}


# Internet VPC
resource "aws_vpc" "main" {
    cidr_block = "10.0.0.0/16"
    instance_tenancy = "default"
    enable_dns_support = "true"
    enable_dns_hostnames = "true"
    enable_classiclink = "false"
    tags {
        Name = "main"
    }
}

# Subnets
resource "aws_subnet" "main-public-1" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.1.0/24"
    map_public_ip_on_launch = "true"
    availability_zone = "eu-west-1a"
    tags {
        Name = "main-public-1"
    }
}

resource "aws_subnet" "main-public-2" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.2.0/24"
    map_public_ip_on_launch = "true"
    availability_zone = "eu-east-1"
    tags {
        Name = "main-public-2"
    }
}

resource "aws_subnet" "main-public-3" {

    vpc_id = "${aws_vpc.main.id}"

    cidr_block = "10.0.3.0/24"

    map_public_ip_on_launch = "true"

    availability_zone = "eu-west-1c"



    tags {

        Name = "main-public-3"

    }

}

resource "aws_subnet" "main-private-1" {

    vpc_id = "${aws_vpc.main.id}"

    cidr_block = "10.0.4.0/24"

    map_public_ip_on_launch = "false"

    availability_zone = "eu-west-1a"
    tags {
        Name = "main-private-1"
    }
}

resource "aws_subnet" "main-private-2" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.5.0/24"
    map_public_ip_on_launch = "false"
    availability_zone = "eu-west-1b"
    tags {
        Name = "main-private-2"
    }
}

resource "aws_subnet" "main-private-3" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.0.6.0/24"
    map_public_ip_on_launch = "false"
    availability_zone = "eu-west-1c"
    tags {
        Name = "main-private-3"
    }
}

# Internet GW
resource "aws_internet_gateway" "main-gw" {
    vpc_id = "${aws_vpc.main.id}"
    tags {
        Name = "main"
    }
}

# route tables
resource "aws_route_table" "main-public" {
    vpc_id = "${aws_vpc.main.id}"
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.main-gw.id}"
    }
    tags {
        Name = "main-public-1"
    }
}
